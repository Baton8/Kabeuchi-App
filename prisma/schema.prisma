// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Chat          Chat[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// プロンプトの組み合わせを保存するテーブル
model PromptCombination {
  id                   String @id @default(cuid())
  genderId             String
  residenceId          String
  jobTitleId           String
  positionId           String
  familyStructureId    String
  educationId          String
  communicationStyleId String
  personalityId        String

  gender             Gender             @relation(fields: [genderId], references: [id])
  residence          Residence          @relation(fields: [residenceId], references: [id])
  jobTitle           JobTitle           @relation(fields: [jobTitleId], references: [id])
  position           Position           @relation(fields: [positionId], references: [id])
  familyStructure    FamilyStructure    @relation(fields: [familyStructureId], references: [id])
  education          Education          @relation(fields: [educationId], references: [id])
  communicationStyle CommunicationStyle @relation(fields: [communicationStyleId], references: [id])
  personality        Personality        @relation(fields: [personalityId], references: [id])
}

model Chat {
  id          String        @id @default(cuid())
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  chatMessage ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id])
}

// プロンプト用マスターデータ
// 性別
model Gender {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// 居住地域
model Residence {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// 職種
model JobTitle {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// 役職
model Position {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// 家族構成
model FamilyStructure {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// 学歴
model Education {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// コミュニケーションスタイル
model CommunicationStyle {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}

// パーソナリティ
model Personality {
  id                String              @id @default(cuid())
  name              String
  PromptCombination PromptCombination[]
}
